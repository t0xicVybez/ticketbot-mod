/**
 * @module leeks.js
 * @copyright David Ralph 2019-2021
 * @license MIT
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.styles = exports.bgKeywords = exports.keywords = exports.colours = exports.disableColors = exports.enableColors = exports.supportsColour = exports.supportsColor = exports.colors = exports.disableColours = exports.enableColours = exports.alias = exports.short = exports.hexBg = exports.hex = exports.rgbBg = exports.rgb = exports.eightBitBg = exports.eightBit = void 0;
const detect = require("./utils/hasColoursSupported");
const Colours_1 = require("./data/Colours");
const Styles_1 = require("./data/Styles");
const Keywords_1 = require("./data/Keywords");
const ShortCodes_1 = require("./data/ShortCodes");
let colorsEnabled = detect.hasColoursSupported();
exports.supportsColor = colorsEnabled;
exports.supportsColour = colorsEnabled;
/**
 * Change the colour of the given text (List: https://docs.davidcralph.co.uk/#/leeks)
 * @param {string} t The text to change the colour of
 */
const colours = [];
exports.colors = colours;
exports.colours = colours;
for (const c in Colours_1.default) {
    colours[c] = (t) => colorsEnabled ? `\x1b[${Colours_1.default[c]}m${t}\x1b[0m` : t;
}
/**
 * Change the style of the given text (List: https://docs.davidcralph.co.uk/#/leeks)
 * @param {string} t The text to change the colour of
 */
const styles = [];
exports.styles = styles;
for (const s in Styles_1.default) {
    styles[s] = (t) => colorsEnabled ? `\x1b[${Styles_1.default[s]}m${t}\x1b[0m` : t;
}
/**
 * Change the colour of the given text using CSS keywords (List: https://docs.davidcralph.co.uk/#/leeks)
 * @param {string} t The text to change the colour of
 */
const keywords = [];
exports.keywords = keywords;
for (const k in Keywords_1.default) {
    keywords[k] = (t) => colorsEnabled ? rgb(Keywords_1.default[k], t) : t;
}
/**
 * Change the background colour of the given text using CSS keywords (List: https://docs.davidcralph.co.uk/#/leeks)
 * @param {string} t The text to change the colour of
 */
const bgKeywords = [];
exports.bgKeywords = bgKeywords;
for (const k in Keywords_1.default) {
    bgKeywords[k] = (t) => colorsEnabled ? rgbBg(Keywords_1.default[k], t) : t;
}
/**
 * Change the colour of the given text using 8-bit colours
 * @param {string} i The 8-bit colour to use
 * @param {string} t The text to show with the 8-bit colour
 */
function eightBit(i, t) {
    if (!colorsEnabled) {
        return t;
    }
    return '\033' + `[38;5;${i}m${t}\x1b[0m`;
}
exports.eightBit = eightBit;
;
/**
 * Change the background colour of the given text using 8-bit colours
 * @param {string} i The 8-bit colour to use
 * @param {string} t The text to show with the 8-bit colour
 */
function eightBitBg(i, t) {
    if (!colorsEnabled) {
        return t;
    }
    return '\033' + `[48;5;${i}m${t}\x1b[0m`;
}
exports.eightBitBg = eightBitBg;
;
/**
 * Change the colour of the given text using RGB
 * @param {[number, number, number]} rgb An array of the RGB to use
 * @param {string} t The text to show with the RGB colour
 */
function rgb(rgb, t) {
    if (!colorsEnabled) {
        return t;
    }
    const [r, g, b] = rgb;
    return '\033' + `[38;2;${r};${g};${b}m${t}\x1b[0m`;
}
exports.rgb = rgb;
;
/**
 * Change the background colour of the given text using RGB
 * @param {[number, number, number]} rgb An array of the RGB to use
 * @param {string} t The text to show with the RGB colour
 */
function rgbBg(rgb, t) {
    if (!colorsEnabled) {
        return t;
    }
    const [r, g, b] = rgb;
    return '\033' + `[48;2;${r};${g};${b}m${t}\x1b[0m`;
}
exports.rgbBg = rgbBg;
;
/**
 * Change the colour of the given text using hexadecimals
 * @param {string} hex The hex to use
 * @param {string} t The text to show with the hexadecimal colour
 * @credit [Stack Overflow](https://stackoverflow.com/q/5623838)
 */
function hex(hex, t) {
    const bigint = parseInt(hex.replace('#', ''), 16);
    return rgb([(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255], t);
}
exports.hex = hex;
;
/**
 * Change the background colour of the given text using hexadecimals
 * @param {string} hex The hex to use
 * @param {string} t The text to show with the hexadecimal colour
 * @credit [Stack Overflow](https://stackoverflow.com/q/5623838)
 */
function hexBg(hex, t) {
    const bigint = parseInt(hex.replace('#', ''), 16);
    return rgbBg([(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255], t);
}
exports.hexBg = hexBg;
;
/**
 * Add colours and styles to a string using short codes
 * @param {string} t The text to format
 */
function short(t) {
    return t
        .replace(/&!?[0-9a-f]/gi, code => colorsEnabled ? `\x1b[${Colours_1.default[ShortCodes_1.default.colours[code]]}m` : '')
        .replace(/&[i-pr]/gi, code => colorsEnabled ? `\x1b[${Styles_1.default[ShortCodes_1.default.styles[code]]}m` : '')
        .replace(/&!?#([0-9A-Fa-f]{3,6})/gi, (match, code) => {
        if (!colorsEnabled)
            return '';
        const bigint = parseInt(code, 16);
        const [r, g, b] = [(bigint >> 16) & 255, (bigint >> 8) & 255, bigint & 255];
        return `\x1b[${match.includes('!') ? '48' : '38'};2;${r};${g};${b}m`;
    }) + (colorsEnabled ? '\x1b[0m' : '');
}
exports.short = short;
/**
 * Set an alias
 * @param {string} name The name of the alias
 * @param {string} type Either "colours", "colors" or "styles"
 * @param {string} value The colour/style you want to use, e.g leeks.colours.green
 */
function alias(name, type, value) {
    switch (type) {
        case 'colors':
        case 'colours':
            colours[name] = value;
            break;
        case 'styles':
            styles[name] = value;
            break;
        default:
            throw new Error('Must be "colours", "colors" or "styles"');
    }
}
exports.alias = alias;
;
/**
 * Enable colour support for leeks.js
 */
function enableColours() {
    exports.supportsColour = exports.supportsColor = colorsEnabled = true;
}
exports.enableColours = enableColours;
exports.enableColors = enableColours;
/**
 * Disable colour support for leeks.js
 */
function disableColours() {
    exports.supportsColour = exports.supportsColor = colorsEnabled = false;
}
exports.disableColours = disableColours;
exports.disableColors = disableColours;
