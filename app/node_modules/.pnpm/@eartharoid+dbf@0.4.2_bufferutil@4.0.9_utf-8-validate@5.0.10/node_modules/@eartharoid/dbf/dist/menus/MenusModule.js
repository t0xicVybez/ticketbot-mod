"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const errors_1 = require("../errors");
const FrameworkModule_1 = __importDefault(require("../FrameworkModule"));
class MenusModule extends FrameworkModule_1.default {
    constructor(client) {
        super(client, 'menus');
        this.components = new discord_js_1.Collection();
        this.client.on('interactionCreate', (interaction) => __awaiter(this, void 0, void 0, function* () {
            if (!interaction.isStringSelectMenu())
                return;
            let json;
            try {
                json = JSON.parse(interaction.customId);
            }
            catch (error) {
                this.client.emit('error', new errors_1.FrameworkError('InvalidCustomId', interaction.customId));
            }
            if (!json.action || !this.components.has(json.action)) {
                this.emit('unknown', interaction);
                return;
            }
            const menu = this.components.get(json.action);
            try {
                this.emit('run', {
                    interaction,
                    menu,
                });
                yield menu.run(json, interaction);
                this.emit('success', {
                    interaction,
                    menu,
                });
            }
            catch (error) {
                this.emit('error', {
                    error,
                    interaction,
                    menu,
                });
            }
        }));
    }
}
exports.default = MenusModule;
/**
 * Emitted when a menu throws an error
 * @event MenusModule#error
 * @param {SlashCommand} context.command The command this interaction is for
 * @param {Menu} context.menu The menu that threw an error
 * @param {StringSelectMenuInteraction} context.interaction The interaction
 * @param {Error} context.error The error
 */
/**
 * Emitted when a menu is executed
 * @event MenusModule#run
 * @param {SlashCommand} context.command The command
 * @param {Menu} context.menu The menu
 * @param {StringSelectMenuInteraction} context.interaction The interaction
 */
/**
 * Emitted when a menu finishes execution successfully
 * @event MenusModule#success
 * @param {MessageCommand|SlashCommand|UserCommand} context.command The command
 * @param {Menu} context.menu The menu
 * @param {StringSelectMenuInteraction} context.interaction The interaction
 */
/**
 * Emitted when an interaction arrives with a menu that is not loaded
 * @event MenusModule#unknown
 * @param {StringSelectMenuInteraction} interaction The interaction
 */ 
