"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const readline_1 = require("readline");
const FrameworkModule_1 = __importDefault(require("../FrameworkModule"));
class StdinCommandsModule extends FrameworkModule_1.default {
    constructor(client) {
        super(client, 'stdin');
        this.components = new discord_js_1.Collection();
        this.interface = (0, readline_1.createInterface)({
            input: process.stdin,
            output: process.stdout,
        });
        this.interface.on('line', (input) => __awaiter(this, void 0, void 0, function* () {
            var _a;
            const args = input.split(/\s/g);
            const commandName = (_a = args.shift()) === null || _a === void 0 ? void 0 : _a.toLowerCase();
            if (!commandName)
                return;
            const command = this.components.get(commandName);
            if (command) {
                try {
                    this.emit('run', { command });
                    yield command.run(args);
                    this.emit('success', { command });
                }
                catch (error) {
                    this.emit('error', {
                        command,
                        error,
                    });
                }
            }
            else {
                this.emit('unknown', commandName);
            }
        }));
    }
}
exports.default = StdinCommandsModule;
/**
 * Emitted when a command throws an error
 * @event StdinCommandsModule#error
 * @param {SlashCommand} context.command The command this interaction is for
 * @param {Command} context.command The command that threw an error
 * @param {CommandInteraction} context.interaction The interaction
 * @param {Error} context.error The error
 */
/**
 * Emitted when a command is executed
 * @event StdinCommandsModule#run
 * @param {SlashCommand} context.command The command
 * @param {Command} context.command The command
 * @param {CommandInteraction} context.interaction The interaction
 */
/**
 * Emitted when a command finishes execution successfully
 * @event StdinCommandsModule#success
 * @param {MessageCommand|SlashCommand|UserCommand} context.command The command
 * @param {Command} context.command The command
 * @param {CommandInteraction} context.interaction The interaction
 */
/**
 * Emitted when an interaction arrives with a command that is not loaded
 * @event StdinCommandsModule#unknown
 * @param {CommandInteraction} interaction The interaction
 */ 
