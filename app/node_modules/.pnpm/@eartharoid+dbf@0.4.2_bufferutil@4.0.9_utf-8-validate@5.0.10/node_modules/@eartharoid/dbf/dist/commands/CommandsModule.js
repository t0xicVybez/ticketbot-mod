"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const FrameworkModule_1 = __importDefault(require("../FrameworkModule"));
const discord_js_1 = require("discord.js");
const errors_1 = require("../errors");
/**
 * @class CommandsModule
 * @fires CommandsModule#error
 * @fires CommandsModule#run
 * @fires CommandsModule#success
 * @fires CommandsModule#unknown
 */
class CommandsModule extends FrameworkModule_1.default {
    constructor(client) {
        super(client, 'commands');
        this.interceptor = null;
        this.components = new discord_js_1.Collection();
        this.commands = {
            message: new discord_js_1.Collection(),
            slash: new discord_js_1.Collection(),
            user: new discord_js_1.Collection(),
        };
        this.client.on('interactionCreate', (interaction) => __awaiter(this, void 0, void 0, function* () {
            if (interaction.type !== discord_js_1.InteractionType.ApplicationCommand)
                return;
            if (this.interceptor)
                yield this.interceptor.call(this, interaction);
            const type = this.getType(interaction.commandType);
            const command = this.commands[type].get(interaction.commandName);
            if (command) {
                try {
                    this.emit('run', {
                        command,
                        interaction,
                    });
                    // @ts-expect-error: its fine
                    yield command.run(interaction);
                    this.emit('success', {
                        command,
                        interaction,
                    });
                }
                catch (error) {
                    this.emit('error', {
                        command,
                        error,
                        interaction,
                    });
                }
            }
            else {
                this.emit('unknown', interaction);
            }
        }));
    }
    getType(type) {
        let t;
        switch (type) {
            case discord_js_1.ApplicationCommandType.ChatInput:
                t = 'slash';
                break;
            case discord_js_1.ApplicationCommandType.Message:
                t = 'message';
                break;
            case discord_js_1.ApplicationCommandType.User:
                t = 'user';
                break;
        }
        return t;
    }
    /**
     * Load a command
     * @param filepath The filepath of the command
     * @param reload Has the component already been loaded?
     */
    load(filepath, reload) {
        return __awaiter(this, void 0, void 0, function* () {
            const Command = (yield Promise.resolve().then(() => __importStar(require(filepath)))).default;
            const command = new Command(this.client, {
                filepath,
                moduleName: this.name,
            });
            command.filepath = filepath;
            if (!reload && this.components.has(command.id))
                throw new errors_1.FrameworkError('ComponentAlreadyLoaded', command.id, this.name);
            this.components.set(command.id, command);
            const type = this.getType(command.type);
            // @ts-expect-error: its fine
            this.commands[type].set(command.name, command);
            this.emit('componentLoad', command, reload !== null && reload !== void 0 ? reload : false);
        });
    }
    /** Publish the application commands to Discord */
    publish() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.client.application)
                return false;
            const components = this.components;
            const commands = components.map(c => c.toJSON());
            // @ts-expect-error: its fine
            return this.client.application.commands.set(commands);
        });
    }
}
exports.default = CommandsModule;
/**
 * Emitted when a command throws an error
 * @event CommandsModule#error
 * @param {MessageCommand|SlashCommand|UserCommand} context.command The command
 * @param {any} context.error The error
 * @param {Interaction} context.interaction The interaction
 */
/**
 * Emitted when a command is executed
 * @event CommandsModule#run
 * @param {MessageCommand|SlashCommand|UserCommand} command The command
 * @param {Interaction} interaction The interaction
 */
/**
 * Emitted when a command finishes execution successfully
 * @event CommandsModule#success
 * @param {MessageCommand|SlashCommand|UserCommand} command The command
 * @param {Interaction} interaction The interaction
 */
/**
 * Emitted when an interaction arrives with a command that is not loaded
 * @event CommandsModule#unknown
 * @param {Interaction} interaction The interaction
 */
