"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const FrameworkModule_1 = __importDefault(require("../FrameworkModule"));
const errors_1 = require("../errors");
class ListenersModule extends FrameworkModule_1.default {
    constructor(client) {
        super(client, 'listeners');
    }
    /**
     * Load a listener
     * @param {string} filepath The filepath of the listener
     * @param {boolean} reload Has the component already been loaded?
     */
    load(filepath, reload) {
        return __awaiter(this, void 0, void 0, function* () {
            const Listener = (yield Promise.resolve().then(() => __importStar(require(filepath)))).default;
            const listener = new Listener(this.client, {
                filepath,
                moduleName: this.name,
            });
            listener.filepath = filepath;
            if (!reload && this.components.has(listener.id))
                throw new errors_1.FrameworkError('ComponentAlreadyLoaded', listener.id, this.name);
            listener._run = (...args) => listener.run(...args);
            listener.emitter[listener.once ? 'once' : 'on'](listener.event, listener._run);
            this.components.set(listener.id, listener);
            this.emit('componentLoad', listener, reload !== null && reload !== void 0 ? reload : false);
        });
    }
    /**
     * Unload a listener
     * @param {string} id The ID of the listener to unload
     * @param {boolean} reload Is the listener about to be loaded again?
     */
    unload(id, reload = false) {
        if (!this.components.has(id))
            throw new errors_1.FrameworkError('UnknownComponent', id, this.name);
        const component = this.components.get(id);
        if (component._run)
            component.emitter.off(component.event, component._run); // remove the listener from the EventEmitter
        delete require.cache[component.filepath];
        // don't fully unload (using unload method) as removing it from `this.components` could cause an infinite loop
        if (!reload)
            this.components.delete(id);
        this.emit('componentUnload', id, reload !== null && reload !== void 0 ? reload : false);
    }
}
exports.default = ListenersModule;
