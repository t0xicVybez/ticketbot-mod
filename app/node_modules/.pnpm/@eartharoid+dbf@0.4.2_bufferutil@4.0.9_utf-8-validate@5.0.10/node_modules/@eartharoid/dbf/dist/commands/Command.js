"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const FrameworkComponent_1 = __importDefault(require("../FrameworkComponent"));
class Command extends FrameworkComponent_1.default {
    constructor(client, options) {
        var _a;
        if (!options.type)
            throw new errors_1.FrameworkTypeError('InvalidCommandType', options.type);
        super(client, {
            filepath: options.filepath,
            id: `${options.type}:${options.name}`,
            moduleName: 'commands',
        });
        this.dmPermission = options.dmPermission;
        this.defaultMemberPermissions = (_a = options.defaultMemberPermissions) !== null && _a !== void 0 ? _a : null;
        this.description = options.description;
        this.descriptionLocalizations = options.descriptionLocalizations;
        this.name = options.name;
        this.nameLocalizations = options.nameLocalizations;
        this.type = options.type;
    }
    toJSON() {
        return {
            defaultMemberPermissions: this.defaultMemberPermissions,
            dmPermission: this.dmPermission,
            name: this.name,
            nameLocalizations: this.nameLocalizations,
            type: this.type,
        };
    }
}
exports.default = Command;
