"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const discord_js_1 = require("discord.js");
const events_1 = __importDefault(require("events"));
const path_1 = require("path");
const node_dir_1 = require("node-dir");
const errors_1 = require("./errors");
const fs_1 = require("fs");
/**
 * @class FrameworkModule
 * @fires FrameworkModule#componentLoad
 * @fires FrameworkModule#componentReload
 * @fires FrameworkModule#componentUnload
 */
class FrameworkModule extends events_1.default {
    constructor(client, name) {
        super();
        this.client = client;
        this.components = new discord_js_1.Collection();
        this.name = name;
        this.client.mods.set(name, this);
    }
    /** List files in the module directory */
    listFiles() {
        var _a;
        const moduleDir = (0, path_1.resolve)(this.client.baseDir, this.name);
        if (!(0, fs_1.existsSync)(moduleDir))
            return [];
        const files = (_a = (0, node_dir_1.files)(moduleDir, { sync: true })) !== null && _a !== void 0 ? _a : [];
        return files.filter(file => file.endsWith('.js') || file.endsWith('.ts'));
    }
    /**
     * Load a component
     * @param filepath The filepath of the component
     * @param reload Has the component already been loaded?
     */
    load(filepath, reload = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const Component = (yield Promise.resolve().then(() => __importStar(require(filepath)))).default;
            const component = new Component(this.client, {
                filepath,
                moduleName: this.name,
            });
            component.filepath = filepath;
            if (!reload && this.components.has(component.id))
                throw new errors_1.FrameworkError('ComponentAlreadyLoaded', component.id, this.name);
            this.components.set(component.id, component);
            this.emit('componentLoad', component, reload !== null && reload !== void 0 ? reload : false);
        });
    }
    loadAll() {
        const files = this.listFiles();
        for (const file of files) {
            try {
                this.load(file);
            }
            catch (error) {
                this.client.emit('error', new errors_1.FrameworkError('ModLoadingError', this.name, error));
            }
        }
    }
    /**
     * Reload a component
     * @param id The ID of the component to reload
     */
    reload(id) {
        if (!this.components.has(id))
            throw new errors_1.FrameworkError('UnknownComponent', id, this.name);
        const component = this.components.get(id);
        this.unload(id, true);
        this.load(component.filepath, true);
        this.emit('componentReload', id);
    }
    toJSON() {
        return this.components.toJSON();
    }
    toString() {
        return this.name;
    }
    /**
     * Unload a component
     * @param id The ID of the component to unload
     * @param reload Is the component about to be loaded again?
     */
    unload(id, reload = false) {
        if (!this.components.has(id))
            throw new errors_1.FrameworkError('UnknownComponent', id, this.name);
        const component = this.components.get(id);
        delete require.cache[component.filepath];
        // don't fully unload (using unload method) as removing it from `this.components` could cause an infinite loop
        if (!reload)
            this.components.delete(id);
        this.emit('componentUnload', id, reload !== null && reload !== void 0 ? reload : false);
    }
}
exports.default = FrameworkModule;
/**
 * Emitted when the module loads a {@link Component}
 * @event FrameworkModule#componentLoad
 * @param {Component} component The component loaded
 * @param {boolean} reload If the component has just been reloaded
 */
/**
 * Emitted when the module reloads a component
 * @event FrameworkModule#componentReload
 * @param {string} componentId The ID of component reloaded
 */
/**
 * Emitted when the module unloads a component
 * @event FrameworkModule#componentUnload
 * @param {string} componentId The ID of component unloaded
 * @param {boolean} reload If the component is in the process of being reloaded
 */ 
